// searchMenu.js ‚Äì ‘π’°÷Ä’¥’°÷Å’æ’°’Æ ’ø’°÷Ä’¢’•÷Ä’°’Ø

function askForNumber(bot, chatId, callback) {
  bot.sendMessage(chatId, '’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’æ’ø’∏’¢’∏÷Ç’Ω’´ ’∞’°’¥’°÷Ä’® (’¥’´’°’µ’∂ ’©’´’æ):');
  const listener = msg => {
    if (!msg.text) return;
    const number = msg.text.trim();
    if (!/^\d+$/.test(number)) {
      bot.sendMessage(chatId, '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’¥’´’°’µ’∂ ’©’´’æ÷â');
      return;
    }
    bot.removeListener('message', listener);
    callback(number);
  };
  bot.on('message', listener);
}

function askForText(bot, chatId, label, callback) {
  bot.sendMessage(chatId, `’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ${label}:`);
  const listener = msg => {
    if (!msg.text) return;
    const text = msg.text.trim();
    bot.removeListener('message', listener);
    callback(text);
  };
  bot.on('message', listener);
}

function handleSearch(bot, callbackQuery, userLat, userLon) {
  const chatId = callbackQuery.message.chat.id;

  bot.sendMessage(chatId, '‘∏’∂’ø÷Ä’•÷Ñ ’∏÷Ä’∏’∂’¥’°’∂ ’±÷á’®:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üî¢ ‘±’æ’ø’∏’¢’∏÷Ç’Ω’´ ’∞’°’¥’°÷Ä', callback_data: 'search_by_number' }],
        [{ text: 'üõ£Ô∏è ‘µ÷Ä’©’∏÷Ç’≤’∏÷Ç ’°’∂’æ’°’∂’∏÷Ç’¥', callback_data: 'search_by_route' }],
        [{ text: 'üöè ‘ø’°’∂’£’°’º’´ ’°’∂’æ’°’∂’∏÷Ç’¥', callback_data: 'search_by_stop' }]
      ]
    }
  });

  bot.once('callback_query', cq => {
    bot.answerCallbackQuery(cq.id);
    if (cq.data === 'search_by_number') {
      askForNumber(bot, chatId, number => {
        const found = searchByBusNumber(number);
        return showRouteResults(bot, chatId, found, userLat, userLon);
      });
    }
    if (cq.data === 'search_by_route') {
      askForText(bot, chatId, '’•÷Ä’©’∏÷Ç’≤’∏÷Ç ’°’∂’æ’°’∂’∏÷Ç’¥’®', text => {
        const found = searchByRouteName(text);
        return showRouteResults(bot, chatId, found, userLat, userLon);
      });
    }
    if (cq.data === 'search_by_stop') {
      askForText(bot, chatId, '’Ø’°’∂’£’°’º’´ ’°’∂’æ’°’∂’∏÷Ç’¥’®', text => {
        const found = searchByStopName(text);
        return showStopResults(bot, chatId, found, userLat, userLon);
      });
    }
  });
}

// ’ë’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’ß ’Ø’°’∂’£’°’º’∂’•÷Ä’´ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’® 10 ’∞’°’ø’∏’æ ’ß’ª’•÷Ä’∏’æ
function showStopResults(bot, chatId, stops, userLat, userLon, page = 0) {
  if (!stops.length) return bot.sendMessage(chatId, '’à’π’´’∂’π ’π’´ ’£’ø’∂’æ’•’¨÷â');

  const pageSize = 10;
  const start = page * pageSize;
  const pageStops = stops.slice(start, start + pageSize);

  let text = `üöè ‘≥’ø’∂’æ’°’Æ ’Ø’°’∂’£’°’º’∂’•÷Ä (’¥’°’Ω ${page+1}):\n`;
  pageStops.forEach((s, i) => {
    let eta = s?.eta_min && s.eta_min > 0 ? Math.round(s.eta_min) : 1;
    text += `${start + i + 1}. ${s.name?.hy ?? '‘±’∂’∞’°’µ’ø'} üî¥ ‚è± ’¥’∏’ø’°’æ’∏÷Ä’°’∫’•’Ω <b>${eta} ÷Ä’∏’∫’•</b>\nüöç ${s.routeName}\n\n`;
  });

  const buttons = [];
  if (start + pageSize < stops.length)
    buttons.push({ text: '’Ä’°’ª’∏÷Ä’§', callback_data: `stop_next_${page+1}` });
  if (page > 0)
    buttons.push({ text: '’Ü’°’≠’∏÷Ä’§', callback_data: `stop_prev_${page-1}` });

  bot.sendMessage(chatId, text, {
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: [buttons] }
  });

  bot.once('callback_query', cq => {
    if (!cq.data.startsWith('stop_')) return;
    bot.answerCallbackQuery(cq.id);
    const newPage = parseInt(cq.data.split('_')[2], 10);
    showStopResults(bot, chatId, stops, userLat, userLon, newPage);
  });
}

module.exports = { handleSearch };
